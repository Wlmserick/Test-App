{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Test-App/wf-main/wf-main/Clone-Notion/notion-clone/src/app/ClientBody.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect } from \"react\";\n\nexport default function ClientBody({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  // Remove any extension-added classes during hydration\n  useEffect(() => {\n    // This runs only on the client after hydration\n    document.body.className = \"antialiased\";\n  }, []);\n\n  return <div className=\"antialiased\">{children}</div>;\n}\n"],"names":[],"mappings":";;;;AAEA;;;AAFA;;AAIe,SAAS,WAAW,EACjC,QAAQ,EAGT;;IACC,sDAAsD;IACtD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;gCAAE;YACR,+CAA+C;YAC/C,SAAS,IAAI,CAAC,SAAS,GAAG;QAC5B;+BAAG,EAAE;IAEL,qBAAO,6LAAC;QAAI,WAAU;kBAAe;;;;;;AACvC;GAZwB;KAAA","debugId":null}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Test-App/wf-main/wf-main/Clone-Notion/notion-clone/src/components/theme-provider.tsx"],"sourcesContent":["\"use client\"\n\nimport { createContext, useContext, useEffect, useState } from \"react\"\n\ntype Theme = \"dark\" | \"light\" | \"system\"\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n  storageKey?: string\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"notion-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== \"undefined\" && typeof localStorage !== \"undefined\") {\n      return (localStorage.getItem(storageKey) as Theme) || defaultTheme;\n    }\n    return defaultTheme;\n  });\n\n  useEffect(() => {\n    if (typeof window === \"undefined\") return;\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n      root.classList.add(systemTheme);\n      return;\n    }\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      if (typeof window !== \"undefined\" && typeof localStorage !== \"undefined\") {\n        localStorage.setItem(storageKey, theme);\n      }\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n\n  return context\n}\n"],"names":[],"mappings":";;;;;AAEA;;;AAFA;;AAiBA,MAAM,eAAmC;IACvC,OAAO;IACP,UAAU,IAAM;AAClB;AAEA,MAAM,qCAAuB,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAAsB;AAExD,SAAS,cAAc,EAC5B,QAAQ,EACR,eAAe,QAAQ,EACvB,aAAa,cAAc,EAC3B,GAAG,OACgB;;IACnB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD;kCAAS;YACxC,IAAI,aAAkB,eAAe,OAAO,iBAAiB,aAAa;gBACxE,OAAO,AAAC,aAAa,OAAO,CAAC,eAAyB;YACxD;YACA,OAAO;QACT;;IAEA,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;mCAAE;YACR,uCAAmC;;YAAM;YACzC,MAAM,OAAO,OAAO,QAAQ,CAAC,eAAe;YAC5C,KAAK,SAAS,CAAC,MAAM,CAAC,SAAS;YAC/B,IAAI,UAAU,UAAU;gBACtB,MAAM,cAAc,OAAO,UAAU,CAAC,gCAAgC,OAAO,GAAG,SAAS;gBACzF,KAAK,SAAS,CAAC,GAAG,CAAC;gBACnB;YACF;YACA,KAAK,SAAS,CAAC,GAAG,CAAC;QACrB;kCAAG;QAAC;KAAM;IAEV,MAAM,QAAQ;QACZ;QACA,UAAU,CAAC;YACT,IAAI,aAAkB,eAAe,OAAO,iBAAiB,aAAa;gBACxE,aAAa,OAAO,CAAC,YAAY;YACnC;YACA,SAAS;QACX;IACF;IAEA,qBACE,6LAAC,qBAAqB,QAAQ;QAAE,GAAG,KAAK;QAAE,OAAO;kBAC9C;;;;;;AAGP;GAxCgB;KAAA;AA0CT,MAAM,WAAW;;IACtB,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAE3B,IAAI,YAAY,WACd,MAAM,IAAI,MAAM;IAElB,OAAO;AACT;IAPa","debugId":null}}]
}